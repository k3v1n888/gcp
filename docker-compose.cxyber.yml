# Copyright (c) 2025 Kevin Zachary
# All rights reserved.
#
# This software and associated documentation files (the "Software") are the 
# exclusive property of Kevin Zachary. Unauthorized copying, distribution, 
# modification, or use of this software is strictly prohibited.
#
# For licensing inquiries, contact: kevin@zachary.com

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ssai_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: cyberdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cyberdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ssai_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Model A: Data Intake & Normalization AI (Ingest Service)
  ingest-service:
    build:
      context: .
      dockerfile: services/ingest/Dockerfile
    container_name: ssai_ingest
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./services/ingest:/app
      - ./shared:/app/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PYTHONPATH=/app
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model B: Post-Processing & Enrichment AI (Backend Services)
  postprocess-service:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: ssai_postprocess
    restart: unless-stopped
    command: ["uvicorn", "main_simple:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/cyberdb
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    networks:
      - ssai_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Model C: Quantum AI Predictive Security Engine (Your trained models)
  threat-model:
    build:
      context: .
      dockerfile: ai-service/Dockerfile.dev
    container_name: ssai_threat_model
    restart: unless-stopped
    ports:
      - "9000:8001"
    volumes:
      - ./ai-service:/app
      - ./ai-service/models:/app/models
    environment:
      - PYTHONPATH=/app
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Threat Service (Model C Wrapper)
  threat-service:
    build:
      context: .
      dockerfile: services/threat_service/Dockerfile
    container_name: ssai_threat_service
    restart: unless-stopped
    ports:
      - "8002:8002"
    volumes:
      - ./services/threat_service:/app
      - ./shared:/app/shared
    environment:
      - REMOTE_MODEL_URL=http://threat-model:8001/predict
      - PYTHONPATH=/app
    networks:
      - ssai_network
    depends_on:
      - threat-model
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: services/orchestrator/Dockerfile
    container_name: ssai_orchestrator
    restart: unless-stopped
    ports:
      - "8003:8003"
    volumes:
      - ./services/orchestrator:/app
      - ./shared:/app/shared
    environment:
      - PYTHONPATH=/app
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
      - JIRA_BASE_URL=${JIRA_BASE_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      - JIRA_PROJECT_KEY=${JIRA_PROJECT_KEY:-SEC}
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Approval Console
  console:
    build:
      context: .
      dockerfile: services/console/Dockerfile
    container_name: ssai_console
    restart: unless-stopped
    ports:
      - "8005:8005"
    volumes:
      - ./services/console:/app
      - ./shared:/app/shared
    environment:
      - PYTHONPATH=/app
    networks:
      - ssai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React App)
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.dev
    container_name: ssai_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_INGEST_URL=http://localhost:8000
      - REACT_APP_THREAT_URL=http://localhost:8002
      - REACT_APP_ORCHESTRATOR_URL=http://localhost:8003
      - REACT_APP_CONSOLE_URL=http://localhost:8005
    networks:
      - ssai_network
    depends_on:
      - postprocess-service
      - threat-service
      - orchestrator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  ssai_network:
    driver: bridge
    name: ssai_network

volumes:
  postgres_data:
    name: ssai_postgres_data
